service cloud.firestore {
  match /databases/{database}/documents {
    function myAuthId() {
      return request.auth.uid;
    }
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(userId) {
      return request.auth.uid == userId;
    }
    function existingData() {
      return resource.data;
    }
    function incomingData() {
      return request.resource.data;
    }
    function validateString(text, min, max) {
      return text is string &&
        text.size() <= max &&
        text.size() >= min;
    }

    match /version/{v} {
        function getGame(gameId) {
            return get(/databases/$(database)/documents/version/$(v)/game/$(gameId));
        }
        function getPlayroom(playroomId) {
            return get(/databases/$(database)/documents/version/$(v)/playroom/$(playroomId));
        }

        match /game/{gameId} {
          allow read;
          allow create:
              if isAuthenticated();
          allow update:
              if isAuthenticated() &&
                // Gameの更新はPlayerのみ実施可能
                (getGame(gameId).data.playerBlack.id == myAuthId() ||
                 getGame(gameId).data.playerWhite.id == myAuthId());
        }

        match /gameDetail/{gameId=**} {
          allow read, write: if isAuthenticated();
        }

        match /playroom/{playroomId} {
          allow read:if isAuthenticated();
          allow create:if isAuthenticated();
          allow update:
              if isAuthenticated() &&
              // Player登録は以下のRuleに従う
              // 　WhiteとBlackは別々のPlayerとなる
              // 　Playerの解除は自分自身しか出来ない
              (getPlayroom(playroomId).data.playerBlack == null ||
               getPlayroom(playroomId).data.playerBlack == incomingData().playerBlack ||
               getPlayroom(playroomId).data.playerBlack.id == myAuthId()) &&
              (getPlayroom(playroomId).data.playerWhite == null ||
               getPlayroom(playroomId).data.playerWhite == incomingData().playerWhite ||
               getPlayroom(playroomId).data.playerWhite.id == myAuthId()) &&
              (incomingData().playerBlack == null ||
               incomingData().playerWhite == null ||
               incomingData().playerBlack != incomingData().playerWhite);
          allow delete:
              if isAuthenticated();

          match /vote/{voteId} {
              allow read, write: if isAuthenticated();
          }
        }

        match /score/{gameId} {
          allow read, write: if isAuthenticated();
        }

        match /visitor/{userId} {
          allow read, write;
        }

    }
  }
}
